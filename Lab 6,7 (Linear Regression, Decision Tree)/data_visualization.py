# -*- coding: utf-8 -*-
"""Data Visualization

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j5iqEKBlJsmEkIond_mPBazYljwT1zvv

#  Introduction to Visualization with Matplotlib and Seaborn

MATPLOTLIB
* most popular python plotting library.
* matplotlib.pyplot is a collection of functions that helps make changes to a figure
"""

import matplotlib.pyplot as plt

"""#funtional method to create a plot"""

import numpy as np
x=np.linspace(0,5,10)
y=x**2
print(x)
print(y)

import matplotlib.pyplot as plt
plt.plot(x,y)
plt.title('Amr Plot er Name')
plt.xlabel("Eita amar x_axis")
plt.ylabel('Eita amar y_axis')
plt.show()

"""#Creating a multiples plot in the same Canvas"""

plt.subplot(2,2,1)
plt.plot(x,y,'r')
plt.subplot(2,2,2)
plt.plot(y,x,'b')
plt.subplot(2,2,3)
plt.plot(y,x,'b')
plt.subplot(2,2,4)
plt.plot(y,x,'b')

"""#object oriented api method to plot

The plt.subplot command creates two different objects which are fig and ax. The fig object is a container that holds everything that we see on the page. The axes is the part of the page that holds the data.
"""

fig=plt.figure() #creating figure object
ax=fig.add_axes([0.1,0.1,0.8,0.8]) # adding axis to blank figure
ax.plot(x,y)
ax.set_title('Amr Plot er Name')
ax.set_xlabel("Eita amar x_axis")
ax.set_ylabel('Eita amar y-axis')

fig=plt.figure() #creating figure object
ax=fig.add_axes([0.1,0.1,0.8,0.8]) # adding axis to blank figure
ax.plot(y,x)
ax.set_title('Amr Larger Plot er Name')
ax.set_xlabel("Eita amar  larger x_axis")
ax.set_ylabel("Eita amar larger y_axis")

ax1=fig.add_axes([0.4,0.4,0.3,0.3]) # adding axis to blank figure
ax1.plot(x,y)
ax1.set_title('Amr Smaaller Plot er Name')
ax1.set_xlabel("Eita amar smaller x_axis")
ax1.set_ylabel("Eita amar smaller y_axis")

"""#Creating mulitples plot in a same Canvus using object oriented api"""

fig, ax = plt.subplots()
ax.plot(x,y)
#Here we are seeing a figure with an empty axes

"""#Creating mulitiple plots in a same figure/canvas"""

fig,(ax1,ax2,ax3) = plt.subplots(nrows=3,ncols=1)
ax1.plot(x,y,'r')
ax2.plot(x,y,'b')
ax3.plot(x,y,'g')

plt.tight_layout()
#Here we are seeing a figure with an empty axes

"""#Creating  plots in a different figure/canvas"""

fig1,ax1=plt.subplots()
fig2,ax2=plt.subplots()
ax1.plot(x,y,'r')
ax2.plot(x,y,'b')

import pandas as pd
#naming our columns since the csv file did not have column names
iris = pd.read_csv('/content/sample_data/iris.csv', names=['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class'])  
print(iris.head())
print(iris.shape)

iris.shape[1]

x_data= range(0, iris.shape[0]) #row shape
print(x_data)#0-149
fig=plt.figure()
fig, ax = plt.subplots()
ax.plot(x_data, iris['sepal_width'], marker='v', color='r')
#x and y must have same first dimension

columns = ['sepal_width', 'sepal_length']
print(type(columns))

x_data= range(0, iris.shape[0]) #row shape


fig=plt.figure()
fig, ax = plt.subplots()

for c in columns:
  ax.plot(x_data, iris[c])
ax.set_title('iris dataset')

# create a figure and axis
fig, ax = plt.subplots()
# scatter the sepal_length against the sepal_width
ax.scatter(iris['sepal_length'], iris['sepal_width'])

# create a figure and axis
fig, ax = plt.subplots()
# scatter the sepal_length against the sepal_width
ax.scatter(iris['sepal_length'], iris['sepal_width'])

# set a title and labels
ax.set_title('Iris Dataset')
ax.set_xlabel('sepal_length')
ax.set_ylabel('sepal_width')

fig, ax = plt.subplots(2,2)

"""The axes variable now contains an array of axes objects."""

ax.shape

fig,ax = plt.subplots(2,2)
# scatter the sepal_length against the sepal_width
ax[0,0].scatter(iris['sepal_length'], iris['sepal_width'])
# set a title and labels
ax[0,0].set_title('Iris Dataset')
ax[0,0].set_xlabel('sepal_length')
ax[0,0].set_ylabel('sepal_width')

ax[1,1].scatter(iris['sepal_length'], iris['petal_width'])
# set a title and labels
#ax[1].set_title('Iris Dataset')
ax[1,1].set_xlabel('petal_length')
ax[1,1].set_ylabel('petal_width')

# create a figure and axis
fig, ax = plt.subplots(2,1)
# scatter the sepal_length against the sepal_width
ax[0].scatter(iris['sepal_length'], iris['sepal_width'])
# set a title and labels
ax[0].set_title('Iris Dataset')
ax[0].set_xlabel('sepal_length')
ax[0].set_ylabel('sepal_width')

ax[1].scatter(iris['sepal_length'], iris['petal_width'])
# set a title and labels
#ax[1].set_title('Iris Dataset')
ax[1].set_xlabel('petal_length')
ax[1].set_ylabel('petal_width')

# create color dictionary
colors = {'Iris-setosa':'r', 'Iris-versicolor':'g', 'Iris-virginica':'b'}
# create a figure and axis
fig, ax = plt.subplots()
# plotting each data-point and assigning them a color according to each class label
for i in range(len(iris['sepal_length'])):
  ax.scatter(iris['sepal_length'][i], iris['sepal_width'][i], color=colors[iris['class'][i]])
# set a title and labels
ax.set_title('Iris Dataset')
ax.set_xlabel('sepal_length')
ax.set_ylabel('sepal_width')

iris

"""fig,ax = plt.subplots()
ax.hist(iris['class'])
ax.set_title('frequency of  classes')
ax.set_xlabel('class name')
ax.set_ylabel('no of flowers')
"""

iris.plot.hist(subplots=True, layout=(2,2),figsize=(10,10),bins=100)

iris

import seaborn as sns
co = iris.corr() 
print(co)
sns.heatmap(co)

import seaborn as sns
sns.boxplot(data=iris)

"""PairPlot: Plot pairwise relationships in a dataset.
The diagonal Axes are treated differently, drawing a plot to show the univariate distribution of the data for the variable in that column.
"""

sns.pairplot(iris)

sns.pairplot(iris, hue='class')

fig.savefig('sdsd.png')

