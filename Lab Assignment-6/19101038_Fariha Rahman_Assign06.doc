# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gRv4AujI8tRfl9V_EQ3NC9jGcmHClKVp
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import sklearn

"""PRE PROCESSING"""

volunteer = pd.read_csv('/content/breast cancer classification dataset.csv')
volunteer.head(6)

volunteer.isnull().sum()

from sklearn.impute import SimpleImputer

impute = SimpleImputer(missing_values=np.nan, strategy='mean')

impute.fit(volunteer[['radius_mean']])

volunteer['radius_mean'] = impute.transform(volunteer[['radius_mean']])


impute.fit(volunteer[['fractal_dimension_worst']])

volunteer['fractal_dimension_worst'] = impute.transform(volunteer[['fractal_dimension_worst']])

volunteer.isnull().sum()

volunteer

"""TRAIN TEST SPLIT"""

from sklearn.model_selection import train_test_split
X = volunteer.iloc[:,2:32]
y = volunteer.iloc[:,1]
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)

X

y

"""PRE-PCA SVM"""

from sklearn.svm import SVC
svc = SVC(kernel="linear")
svc.fit(X_train, y_train)
predictions = svc.predict(X_test)
print(predictions)

print("The Training accuracy of the model is {:.2f}".format(svc.score(X_train, y_train)))
print("The Testing accuracy of the model is {:.2f}".format(svc.score(X_test, y_test)))

from sklearn.metrics import accuracy_score
svmAccuracy =accuracy_score(y_test, predictions)
print(svmAccuracy)

"""Neural Network"""

from sklearn.neural_network import MLPClassifier
nnc=MLPClassifier(hidden_layer_sizes=(7), activation="relu", max_iter=1000)
nnc.fit(X_train,y_train)
predictions = nnc.predict(X_test)
print(predictions)

print("The Training accuracy of the model is {:.2f}".format(nnc.score(X_train, y_train)))
print("The Testing accuracy of the model is {:.2f}".format(nnc.score(X_test, y_test)))

nncAccuracy =accuracy_score(y_test, predictions)
print(nncAccuracy)

"""Random Forest"""

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=50)
rfc.fit(X_train,y_train)
predictions = rfc.predict(X_test)
print(predictions)

print("The Training accuracy of the model is {:.2f}".format(rfc.score(X_train, y_train)))
print("The Testing accuracy of the model is {:.2f}".format(rfc.score(X_test, y_test)))

rfcAccuracy =accuracy_score(y_test, predictions)
print(rfcAccuracy)

"""Principle Component Analysis"""

from sklearn.preprocessing import StandardScaler
scaler= StandardScaler()

size = (int(len(X.columns)/2))
size

from sklearn.decomposition import PCA
pca=PCA(n_components=size)
data=pca.fit_transform(scaler.fit_transform(X))

cols=["PC"+str(i) for i in range(1,size+1)]

main_df=pd.DataFrame(data=data, columns=cols)
main_df["target"]=y
main_df.head()

X= main_df.drop("target", axis=1)
y=main_df["target"]

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)

"""POST-PCA SVM"""

from sklearn.svm import SVC
svc = SVC(kernel="linear")
svc.fit(X_train, y_train)
predictions = svc.predict(X_test)
print(predictions)

print("The Training accuracy of the model is {:.2f}".format(svc.score(X_train, y_train)))
print("The Testing accuracy of the model is {:.2f}".format(svc.score(X_test, y_test)))

postPCA_svm_accuracy =accuracy_score(y_test, predictions)
print(postPCA_svm_accuracy)

"""POST-PCA Neural network"""

from sklearn.neural_network import MLPClassifier
nnc=MLPClassifier(hidden_layer_sizes=(7), activation="relu", max_iter=1000)
nnc.fit(X_train,y_train)
predictions = nnc.predict(X_test)
print(predictions)

print("The Training accuracy of the model is {:.2f}".format(nnc.score(X_train, y_train)))
print("The Testing accuracy of the model is {:.2f}".format(nnc.score(X_test, y_test)))

postPCA_nnc_accuracy =accuracy_score(y_test, predictions)
print(postPCA_nnc_accuracy)

"""POST-PCA Random Forest"""

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=50)
rfc.fit(X_train,y_train)
predictions = rfc.predict(X_test)
print(predictions)

print("The Training accuracy of the model is {:.2f}".format(rfc.score(X_train, y_train)))
print("The Testing accuracy of the model is {:.2f}".format(rfc.score(X_test, y_test)))

postPCA_rfc_accuracy =accuracy_score(y_test, predictions)
print(postPCA_rfc_accuracy)

"""pre-PCA and post-PCA Comparison"""

labels = ['SVM', 'Neural Network', 'Random Forest']
pre_pca_accuracy = [svmAccuracy, nncAccuracy, rfcAccuracy]
post_pca_accuracy = [postPCA_svm_accuracy, postPCA_nnc_accuracy, postPCA_rfc_accuracy]

x = np.arange(len(labels))
width = 0.3

fig = plt.figure(figsize=(10,8))
# ax = plt.subplots()
ax = fig.add_subplot()
rects1 = ax.bar(x - width/2, pre_pca_accuracy, width, label='Pre PCA Accuracy')
rects2 = ax.bar(x + width/2, post_pca_accuracy, width, label='Post PCA Accuracy')

ax.set_ylabel('Accuracy score')
ax.set_title('pre-PCA vs post-PCA comparison')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()


fig.tight_layout()

plt.show()